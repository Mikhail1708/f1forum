// services/f1Api.js
import axios from 'axios';

class F1ApiService {
    constructor() {
        this.baseURL = 'https://api.jolpi.ca/ergast/f1';
        this.cache = new Map();
        this.cacheTime = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –∫—ç—à–∞
    }

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    async cachedRequest(cacheKey, requestFn) {
        const cached = this.cache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < this.cacheTime) {
            return cached.data;
        }

        try {
            const data = await requestFn();
            this.cache.set(cacheKey, {
                data,
                timestamp: Date.now()
            });
            return data;
        } catch (error) {
            if (cached) {
                console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API');
                return cached.data;
            }
            throw error;
        }
    }

    // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    async makeRequest(endpoint) {
        try {
            console.log(`üîÑ API –∑–∞–ø—Ä–æ—Å: ${endpoint}`);
            const response = await axios.get(`${this.baseURL}${endpoint}`);
            console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
            return response.data.MRData;
        } catch (error) {
            console.error(`‚ùå API Error for ${endpoint}:`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    async getCurrentSeason() {
        return this.cachedRequest('currentSeason', async () => {
            const data = await this.makeRequest('/current.json');
            return {
                year: parseInt(data.RaceTable.season),
                url: data.url
            };
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏–ª–æ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    async getDrivers() {
        return this.cachedRequest('drivers', async () => {
            const season = await this.getCurrentSeason();
            const data = await this.makeRequest(`/${season.year}/drivers.json`);
            return data.DriverTable.Drivers || [];
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    async getConstructors() {
        return this.cachedRequest('constructors', async () => {
            const season = await this.getCurrentSeason();
            const data = await this.makeRequest(`/${season.year}/constructors.json`);
            return data.ConstructorTable.Constructors || [];
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å
    async getCircuits() {
        return this.cachedRequest('circuits', async () => {
            const season = await this.getCurrentSeason();
            const data = await this.makeRequest(`/${season.year}/circuits.json`);
            return data.CircuitTable.Circuits || [];
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–µ–∑–æ–Ω–∞
    async getCalendar(year = null) {
        if (!year) {
            const season = await this.getCurrentSeason();
            year = season.year;
        }
        
        return this.cachedRequest(`calendar-${year}`, async () => {
            const data = await this.makeRequest(`/${year}.json`);
            return data.RaceTable.Races || [];
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –ø–∏–ª–æ—Ç–æ–≤
    async getDriverStandings(year = null) {
        if (!year) {
            const season = await this.getCurrentSeason();
            year = season.year;
        }
        
        return this.cachedRequest(`driverStandings-${year}`, async () => {
            const data = await this.makeRequest(`/${year}/driverStandings.json`);
            const standings = data.StandingsTable.StandingsLists[0]?.DriverStandings || [];
            
            return standings.map(standing => ({
                position: standing.position,
                Driver: {
                    givenName: standing.Driver.givenName,
                    familyName: standing.Driver.familyName,
                    code: standing.Driver.code
                },
                Constructors: standing.Constructors,
                points: standing.points,
                wins: standing.wins
            }));
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
    async getConstructorStandings(year = null) {
        if (!year) {
            const season = await this.getCurrentSeason();
            year = season.year;
        }
        
        return this.cachedRequest(`constructorStandings-${year}`, async () => {
            const data = await this.makeRequest(`/${year}/constructorStandings.json`);
            return data.StandingsTable.StandingsLists[0]?.ConstructorStandings || [];
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–Ω–∫–∏
    async getNextRace() {
        return this.cachedRequest('nextRace', async () => {
            const calendar = await this.getCalendar();
            const now = new Date();
            const upcomingRaces = calendar.filter(race => new Date(race.date) > now);
            return upcomingRaces.length > 0 ? upcomingRaces[0] : null;
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–æ–Ω–∫–∏
    async getPreviousRace() {
        try {
            const calendar = await this.getCalendar();
            const now = new Date();
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –≥–æ–Ω–∫–∏
            const pastRaces = calendar.filter(race => new Date(race.date) < now);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è –≥–æ–Ω–∫–∞ –ø–µ—Ä–≤–∞—è)
            pastRaces.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            return pastRaces[0] || null;
        } catch (error) {
            console.error('Error getting previous race:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    async getRaceResults(round, season = 'current') {
        try {
            console.log(`üéØ –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏: —Å–µ–∑–æ–Ω ${season}, —Ä–∞—É–Ω–¥ ${round}`);
            const data = await this.makeRequest(`/${season}/${round}/results.json`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if (!data.RaceTable || !data.RaceTable.Races || data.RaceTable.Races.length === 0) {
                console.warn('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–Ω–∫–µ –≤ –æ—Ç–≤–µ—Ç–µ API');
                return [];
            }

            const race = data.RaceTable.Races[0];
            const results = race.Results || [];
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏: ${results.length}`);
            
            return results.map(result => ({
                position: result.position,
                Driver: {
                    givenName: result.Driver.givenName,
                    familyName: result.Driver.familyName,
                    code: result.Driver.code || result.Driver.driverId?.substring(0, 3).toUpperCase()
                },
                Constructor: {
                    name: result.Constructor.name
                },
                Time: result.Time,
                points: result.points,
                status: result.status
            }));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${round}:`, error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    async getQualifyingResults(round, season = 'current') {
        try {
            console.log(`üéØ –ó–∞–ø—Ä–æ—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: —Å–µ–∑–æ–Ω ${season}, —Ä–∞—É–Ω–¥ ${round}`);
            const data = await this.makeRequest(`/${season}/${round}/qualifying.json`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if (!data.RaceTable || !data.RaceTable.Races || data.RaceTable.Races.length === 0) {
                console.warn('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–Ω–∫–µ –≤ –æ—Ç–≤–µ—Ç–µ API');
                return [];
            }

            const race = data.RaceTable.Races[0];
            const results = race.QualifyingResults || [];
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${results.length}`);
            
            return results.map(result => ({
                position: result.position,
                Driver: {
                    givenName: result.Driver.givenName,
                    familyName: result.Driver.familyName,
                    code: result.Driver.code || result.Driver.driverId?.substring(0, 3).toUpperCase()
                },
                Constructor: {
                    name: result.Constructor.name
                },
                Q1: result.Q1,
                Q2: result.Q2,
                Q3: result.Q3
            }));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${round}:`, error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–ª–æ—Ç–µ
    async getDriverDetails(driverId) {
        return this.cachedRequest(`driver-${driverId}`, async () => {
            const data = await this.makeRequest(`/drivers/${driverId}.json`);
            return data.DriverTable.Drivers[0];
        });
    }
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å F1ApiService –≤ f1Api.js

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏–ª–æ—Ç–∞ –∑–∞ —Å–µ–∑–æ–Ω
async getDriverSeasonResults(driverId, season = 'current') {
    try {
        console.log(`üéØ –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏–ª–æ—Ç–∞ ${driverId} –∑–∞ —Å–µ–∑–æ–Ω ${season}`);
        const data = await this.makeRequest(`/${season}/drivers/${driverId}/results.json`);
        const races = data.RaceTable.Races || [];
        
        return races.map(race => ({
            round: race.round,
            raceName: race.raceName,
            date: race.date,
            Circuit: race.Circuit,
            Results: race.Results?.[0] || null
        }));
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏–ª–æ—Ç–∞ ${driverId}:`, error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏–ª–æ—Ç–∞ –∑–∞ —Å–µ–∑–æ–Ω
async getDriverQualifyingResults(driverId, season = 'current') {
    try {
        console.log(`üéØ –ó–∞–ø—Ä–æ—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∏–ª–æ—Ç–∞ ${driverId} –∑–∞ —Å–µ–∑–æ–Ω ${season}`);
        const data = await this.makeRequest(`/${season}/drivers/${driverId}/qualifying.json`);
        const races = data.RaceTable.Races || [];
        
        return races.map(race => ({
            round: race.round,
            raceName: race.raceName,
            QualifyingResults: race.QualifyingResults?.[0] || null
        }));
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∏–ª–æ—Ç–∞ ${driverId}:`, error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏–ª–æ—Ç–∞
async getDriverStats(driverId) {
    try {
        console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏–ª–æ—Ç–∞ ${driverId}`);
        const data = await this.makeRequest(`/drivers/${driverId}/driverStandings.json`);
        const standingsLists = data.StandingsTable.StandingsLists || [];
        
        return standingsLists.map(season => ({
            season: season.season,
            position: season.DriverStandings?.[0]?.position,
            points: season.DriverStandings?.[0]?.points,
            wins: season.DriverStandings?.[0]?.wins,
            Constructors: season.DriverStandings?.[0]?.Constructors || []
        }));
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏–ª–æ—Ç–∞ ${driverId}:`, error);
        return [];
    }
}
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
    async getConstructorDetails(constructorId) {
        return this.cachedRequest(`constructor-${constructorId}`, async () => {
            const data = await this.makeRequest(`/constructors/${constructorId}.json`);
            return data.ConstructorTable.Constructors[0];
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ –ø–æ ID
    async getRaceById(round, season = 'current') {
        try {
            const calendar = await this.getCalendar(season);
            const race = calendar.find(r => r.round === round.toString());
            
            if (!race) {
                console.warn(`‚ùå –ì–æ–Ω–∫–∞ —Å round=${round} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return null;
            }
            
            return race;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏ ${round}:`, error);
            return null;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        this.cache.clear();
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    async healthCheck() {
        try {
            await this.makeRequest('/current.json');
            return true;
        } catch (error) {
            return false;
        }
    }
}

export default new F1ApiService();