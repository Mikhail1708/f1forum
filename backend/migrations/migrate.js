// backend/migrations/migrate.js
const db = require('../db/pool');
const path = require('path');
const fs = require('fs');

const runMigrations = async () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    await runMigration(`
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–∂–µ –µ—Å—Ç—å, –Ω–æ –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è)
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            favorite_team TEXT,
            favorite_driver TEXT,
            avatar_url TEXT DEFAULT 'default-avatar.png',
            is_moderator BOOLEAN DEFAULT FALSE,
            is_banned BOOLEAN DEFAULT FALSE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );

        -- –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ—Ä—É–º–∞
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            slug TEXT UNIQUE NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );

        -- –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º (–ø–æ—Å—Ç–æ–≤)
        CREATE TABLE IF NOT EXISTS topics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            user_id INTEGER NOT NULL,
            category_id INTEGER NOT NULL,
            is_pinned BOOLEAN DEFAULT FALSE,
            is_locked BOOLEAN DEFAULT FALSE,
            views_count INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
            FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
        );

        -- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        CREATE TABLE IF NOT EXISTS comments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            content TEXT NOT NULL,
            user_id INTEGER NOT NULL,
            topic_id INTEGER NOT NULL,
            parent_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
            FOREIGN KEY (topic_id) REFERENCES topics (id) ON DELETE CASCADE,
            FOREIGN KEY (parent_id) REFERENCES comments (id) ON DELETE CASCADE
        );

        -- –¢–∞–±–ª–∏—Ü–∞ –ª–∞–π–∫–æ–≤
        CREATE TABLE IF NOT EXISTS likes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            topic_id INTEGER,
            comment_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, topic_id, comment_id),
            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
            FOREIGN KEY (topic_id) REFERENCES topics (id) ON DELETE CASCADE,
            FOREIGN KEY (comment_id) REFERENCES comments (id) ON DELETE CASCADE
        );

        -- –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        INSERT OR IGNORE INTO categories (name, description, slug) VALUES
        ('–ù–æ–≤–æ—Å—Ç–∏ F1', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –§–æ—Ä–º—É–ª—ã 1', 'news'),
        ('–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ì—Ä–∞–Ω-–ü—Ä–∏', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞', 'grand-prix'),
        ('–ö–æ–º–∞–Ω–¥—ã –∏ –ü–∏–ª–æ—Ç—ã', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –ø–∏–ª–æ—Ç–æ–≤', 'teams-drivers'),
        ('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', 'technical'),
        ('–ò—Å—Ç–æ—Ä–∏—è F1', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã', 'history'),
        ('–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤', '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤', 'beginners');
    `, '001_initial_schema');

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
};

const runMigration = (sql, migrationName) => {
    return new Promise((resolve, reject) => {
        console.log(`üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationName}`);
        db.exec(sql, (err) => {
            if (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationName}:`, err);
                reject(err);
            } else {
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationName} —É—Å–ø–µ—à–Ω–∞`);
                resolve();
            }
        });
    });
};

module.exports = { runMigrations };